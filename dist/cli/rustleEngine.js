#!/usr/bin/env node
"use strict";var t=Object.defineProperty,e=(e,s,a)=>((e,s,a)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[s]=a)(e,"symbol"!=typeof s?s+"":s,a);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const s=require("fs"),a=require("path"),n=require("glob"),r=require("../fingerprinting-DpjyWojc.js");function o(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t)for(const s in t)if("default"!==s){const a=Object.getOwnPropertyDescriptor(t,s);Object.defineProperty(e,s,a.get?a:{enumerable:!0,get:()=>t[s]})}return e.default=t,Object.freeze(e)}const i=o(n);class c{constructor(t){e(this,"config"),e(this,"extractedEntries",new Map),e(this,"existingMaster",null),this.config=t}async extract(){await this.loadExistingMaster();const t=await this.findSourceFiles();for(const e of t)await this.extractFromFile(e);await this.generateMasterFile(),await this.generateLocaleFiles()}async loadExistingMaster(){const t=a.join(this.config.outputDir,"master.json");if(s.existsSync(t))try{const e=s.readFileSync(t,"utf-8");this.existingMaster=JSON.parse(e)}catch(e){}}async findSourceFiles(){const t=this.config.filePatterns.map(t=>a.join(this.config.srcDir,t)),e=[];for(const a of t){const t=await new Promise((t,e)=>{i.glob(a,(s,a)=>{s?e(s):t(a)})});e.push(...t)}const s=e.filter(t=>!this.config.excludePatterns.some(e=>t.includes(e.replace("**/","").replace("/**",""))));return[...new Set(s)]}async extractFromFile(t){this.config.debug;try{const e=s.readFileSync(t,"utf-8"),n=a.relative(this.config.srcDir,t);this.extractWithRegex(e,n)}catch(e){}}extractWithRegex(t,e){[/<([a-zA-Z][a-zA-Z0-9]*)[^>]*>([^<]+)<\/\1>/g,/<[a-zA-Z][a-zA-Z0-9]*[^>]*\s(alt|title|placeholder|aria-label)=["']([^"']+)["'][^>]*\/?>/g,/\{["']([^"']+)["']\}/g].forEach((s,a)=>{var n;let o;for(;null!==(o=s.exec(t));){const s=o[2]||o[1];if(s&&r.isTranslatableText(s)){const a=o.index,i=r.generateContentFingerprint(s),c=r.generateContentHash(s),l=this.extractTagContext(t,a),u={fingerprint:i,source:s.trim(),file:e,loc:{start:a,end:a+o[0].length},contentHash:c,version:1,translations:{},lastTranslatedAt:(new Date).toISOString(),tags:l,status:"new"},h=null==(n=this.existingMaster)?void 0:n.entries[i];h&&(h.contentHash!==c?(u.version=h.version+1,u.status="updated",u.translations=h.translations):(u.version=h.version,u.status=h.status,u.translations=h.translations,u.lastTranslatedAt=h.lastTranslatedAt)),this.extractedEntries.set(i,u),this.config.debug}}})}shouldExcludeTag(t){return["html","head","body","script","style","meta","link","title","rustlebox","rustlego","autotranslate","provider","context","fragment"].includes(t.toLowerCase())}extractTagContext(t,e){const s=(t.substring(Math.max(0,e-100),e)+t.substring(e,Math.min(t.length,e+100))).match(/<\/?([a-zA-Z][a-zA-Z0-9]*)/g)||[];return[...new Set(s.map(t=>t.replace(/[</>]/g,"").toLowerCase()))].filter(t=>!this.shouldExcludeTag(t)).slice(0,3)}async generateMasterFile(){const t={metadata:{version:"1.0.0",sourceLanguage:this.config.sourceLanguage,targetLanguages:this.config.targetLanguages,lastUpdated:(new Date).toISOString(),totalEntries:this.extractedEntries.size},entries:Object.fromEntries(this.extractedEntries)},e=a.join(this.config.outputDir,"master.json");s.mkdirSync(a.dirname(e),{recursive:!0}),s.writeFileSync(e,JSON.stringify(t,null,2))}async generateLocaleFiles(){const t=a.join(this.config.outputDir,"locales");s.mkdirSync(t,{recursive:!0});const e={};for(const[s,a]of this.extractedEntries)e[s]=a.source;const n=a.join(t,`${this.config.sourceLanguage}.json`);s.writeFileSync(n,JSON.stringify(e,null,2));for(const o of this.config.targetLanguages){const e={},n=[];for(const[t,s]of this.extractedEntries)s.translations[o]?e[t]=s.translations[o]:n.push({id:t,text:s.source});if(n.length>0)try{const t=await this.translateBatch(n,this.config.sourceLanguage,o);for(const s of n){const a=t[s.id];if(a){const t=this.cleanTranslation(a);e[s.id]=t;const n=this.extractedEntries.get(s.id);n&&(n.translations[o]=t)}else e[s.id]=s.text}}catch(r){for(const t of n)e[t.id]=t.text}const i=a.join(t,`${o}.json`);s.writeFileSync(i,JSON.stringify(e,null,2))}}cleanTranslation(t){return r.cleanTranslation(t)}async translateBatch(t,e,s){const a=process.env.RUSTLE_API_URL||"https://api.rustle.dev",n=process.env.RUSTLE_API_KEY||"test-api-key-123",r=await fetch(`${a}/api/translate/batch`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({entries:t,sourceLanguage:e,targetLanguage:s,model:"gpt-3.5-turbo"})});if(!r.ok)throw new Error(`Translation API error: ${r.status} ${r.statusText}`);const o=await r.json();if(!o.success)throw new Error(`Translation failed: ${o.error||"Unknown error"}`);return o.translations}}async function l(t){const e={sourceLanguage:"en",targetLanguages:["es","fr","de","it","pt"],srcDir:"./src",outputDir:"./public/rustle",filePatterns:["**/*.tsx","**/*.jsx","**/*.ts","**/*.js"],excludePatterns:["**/node_modules/**","**/dist/**","**/*.test.*","**/*.spec.*"],debug:!1,...t},s=new c(e);try{await s.extract()}catch(a){process.exit(1)}}require.main===module&&l({debug:process.argv.includes("--debug")}),exports.runRustleEngine=l;
